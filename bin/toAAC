#!/bin/bash

# functions
encode() { # put your encoding settings here

    when=$(date +%Y%m%d%H%M%S)
    FFREPORT=file="$log/$baseext.$when.log":level=32 \
    \
    ffmpeg -hide_banner -loglevel quiet -i "$file" -af volume="$r128"dB -vn -y "$tmpdir/$base.wav" # to pcm tmp 
    
    # https://sourceforge.net/projects/opencore-amr/files/fdk-aac/ && https://github.com/nu774/fdkaac
    fdkaac -m4 "$tmpdir/$base.wav" -o "$tmpdir/$base.m4a"
    
}
# help
    if [ $# -eq 0 ]; then echo "anything to fdk AAC/m4a with some optional EBU r128 and auto MXF input support"; exit 1; fi
    
# script name into "$me"
me=$(basename $BASH_SOURCE)

echo "$me"

# source config file which includes tmpdir generator and timer
config="$HOME/bin/singularity.cfg"
test -f "$config" && source "$config" || { echo "$config does not exist" ; exit 1; }
# and timer
source "$HOME/bin/timer_func" # not a big deal if this fails

# indirect? (if called from another script then also overwrite $out)
# example call: thisScript scriptcall "/some/writable/dir" inputfile
    if [ "$1" == "scriptcall" ]; then # this is called from another script
        # now check 2nd parameter (new $out) which should be writable and directory
        if [ -d "$2" ] && [ -w "$2" ] ;  then 
            echo "$2 is writable directory"  
            out="$2" # new writable output directory is the one that was passed by calling script (its $tmp)
            shift ; shift # remove 1st two, so only files are left for further loops
        else 
            echo "$2 is not directory or writable"; exit 1
        fi
    else
        echo "direct call"        
    fi

# checks
command -v mediainfo >/dev/null 2>&1 || { >&2 echo "I need mediainfo installed." ; exit 1; }
command -v fdkaac >/dev/null 2>&1 || { >&2 echo "I need fdkaac installed." ; exit 1; }
command -v ffmpeg >/dev/null 2>&1 || { >&2 echo "I need ffmpeg installed." ; exit 1; }
command -v r128corection >/dev/null 2>&1 || { >&2 echo "I need r128corection script on path" ; exit 1; }
command -v hasAudio >/dev/null 2>&1 || { >&2 echo "I need hasAudio script on path" ; exit 1; }
command -v MXFdownmix >/dev/null 2>&1 || { >&2 echo "I need MXFdownmix script on path" ; exit 1; }

# main
while [ $# -gt 0 ]; do
    file=$(readlink -f "$1")
    echo "$me inp $file"
    baseext=$(basename "${1}")     # basename, like                file.flac
    base="${baseext%.*}"           # basename without extension    file
    echo "$me out $out/$base.m4a"

    hasAudio "$file" || { >&2 echo "No Audio in $file" ; shift; continue; } # "continue" should skip to next file in this while loop.
    
    if $(isMXF "$file"); then
    echo "MXF detected"
    MXFdownmix "$file" "$tmpdir"
    file="$tmpdir/$base.Stereo.wav" # this is the new target for the r128 and encode function now
    fi
    
    # IS r128 = true, then encode with that in mind ...
    if [ "$EBUR128" == "true" ]; then # this is set in config
        r128=$(r128corection "$file")
        echo "$r128"
    else    
        r128="0"
    fi
    
    # action
    encode # function
    
    # move file out of tmp to its final location
    mv "$tmpdir/$base.m4a" "$out/$base.m4a" # will replace files with same name 
    

shift
done

echo "$me done in" $(timer $tmr)


