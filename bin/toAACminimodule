#!/bin/bash

# help
if [ $# -eq 0 ]; then echo "AAC module, should not ne run standalone (but you can with file as $1 and out as $2)"; exit 1; fi

# 2nd parameter is always temporary output dir
tmpdir="$2"

# functions
encode() { # put your encoding settings here

    when=$(date +%Y%m%d%H%M%S)
    FFREPORT=file="$log/$baseext.$when.log":level=32 \
    ffmpeg -hide_banner -loglevel quiet -i "$file" -af volume="$r128"dB -vn -y "$tmpdir/$base.wav" # to pcm tmp 
    
    # https://sourceforge.net/projects/opencore-amr/files/fdk-aac/ && https://github.com/nu774/fdkaac
    fdkaac -m4 "$tmpdir/$base.wav" -o "$tmpdir/$base.m4a"
    
}

# checks
command -v mediainfo >/dev/null 2>&1 || { >&2 echo "I need mediainfo installed." ; exit 1; }
command -v fdkaac >/dev/null 2>&1 || { >&2 echo "I need fdkaac installed." ; exit 1; }
command -v ffmpeg >/dev/null 2>&1 || { >&2 echo "I need ffmpeg installed." ; exit 1; }
command -v r128corection >/dev/null 2>&1 || { >&2 echo "I need r128corection script on path" ; exit 1; }

# main

    file=$(readlink -f "$1")
    echo "$file"
    baseext=$(basename "${1}")     # basename, like                file.flac
    base="${baseext%.*}"           # basename without extension    file
    # dir=$(dirname "${1}")       # directory
    
    hasAudio "$file" || { >&2 echo "No Audio in $file" ; break; } 
    
    if $(isMXF "$file"); then
    echo "MXF detected"
    MXFdownmix "$file" "$tmpdir"
    file="$tmpdir/$base.Stereo.wav" # this is the new target for the r128 and encode function now
    fi
    
    # IS r128 = true, then encode with that in mind ...
    if [ "$EBUR128" == "true" ]; then # this is set in config
        r128=$(r128corection "$file")
        echo "$r128"
    else    
        r128="0"
    fi
    
    # action
    encode # function

# mv "$tmpdir/$base.m4a" "$out/$base.m4a" # will replace files with same name 




